<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="db/d45/git__utils_8h" kind="file" language="C++">
    <compoundname>git_utils.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includedby refid="d2/dda/display__utils_8c" local="yes">/home/honeyguide/Desktop/MyOpenSource/facad/src/display_utils.c</includedby>
    <includedby refid="d1/dc4/git__integration_8h" local="yes">/home/honeyguide/Desktop/MyOpenSource/facad/src/git_integration.h</includedby>
    <includedby refid="d1/db9/git__utils_8c" local="yes">/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c</includedby>
    <includedby refid="d0/d29/main_8c" local="yes">/home/honeyguide/Desktop/MyOpenSource/facad/src/main.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h</label>
        <link refid="db/d45/git__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdbool.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/display_utils.c</label>
        <link refid="d2/dda/display__utils_8c"/>
      </node>
      <node id="4">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/git_integration.c</label>
        <link refid="df/d77/git__integration_8c"/>
      </node>
      <node id="3">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/git_integration.h</label>
        <link refid="d1/dc4/git__integration_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c</label>
        <link refid="d1/db9/git__utils_8c"/>
      </node>
      <node id="1">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h</label>
        <link refid="db/d45/git__utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/main.c</label>
        <link refid="d0/d29/main_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d1/d46/structGitFile" prot="public">GitFile</innerclass>
    <innerclass refid="da/ddb/structGitFileList" prot="public">GitFileList</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="db/d45/git__utils_8h_1abe0ec333b60117063f9b9fd9f849cb08" prot="public" static="no">
        <name>MAX_FILENAME</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" line="18" column="9" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" bodystart="18" bodyend="-1"/>
        <referencedby refid="d1/db9/git__utils_8c_1a1af8df0b83d4e26524cdb4371b7bd7a6" compoundref="d1/db9/git__utils_8c" startline="65" endline="89">get_git_status</referencedby>
        <referencedby refid="df/d77/git__integration_8c_1ac8420e6fdcd1a0373f840ecbe95a220a" compoundref="df/d77/git__integration_8c" startline="30" endline="68">integrate_git_status</referencedby>
      </memberdef>
      <memberdef kind="define" id="db/d45/git__utils_8h_1a2c5eecb22513a88c24ae5831a3265e54" prot="public" static="no">
        <name>MAX_FILES</name>
        <initializer>1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" line="19" column="9" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" bodystart="19" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="db/d45/git__utils_8h_1ab59b5067f41c72180a081769679d524d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_git_repository</definition>
        <argsstring>(void)</argsstring>
        <name>is_git_repository</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the current directory is part of a Git repository. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines whether the current working directory is within a Git repository.</para>
<para><simplesect kind="return"><para>true if the current directory is in a Git repository, false otherwise.</para>
</simplesect>
This function executes the &apos;git rev-parse&apos; command to determine if the current working directory is within a Git repository.</para>
<para><simplesect kind="return"><para>true if the current directory is in a Git repository, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" line="47" column="6" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" bodystart="28" bodyend="40" declfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" declline="47" declcolumn="6"/>
        <referencedby refid="df/d77/git__integration_8c_1ac8420e6fdcd1a0373f840ecbe95a220a" compoundref="df/d77/git__integration_8c" startline="30" endline="68">integrate_git_status</referencedby>
        <referencedby refid="d0/d29/main_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d0/d29/main_8c" startline="275" endline="423">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d45/git__utils_8h_1a3d9263e3ac5e7c5af45a994cc1d7d559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref></type>
        <definition>GitFileList get_git_status</definition>
        <argsstring>(void)</argsstring>
        <name>get_git_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Retrieves the Git status for all files in the current repository. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the status of all files in the current Git repository, including untracked, modified, and staged files.</para>
<para><simplesect kind="return"><para><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref> structure containing the status of all files in the repository.</para>
</simplesect>
This function executes &apos;git status&apos; command and parses its output to create a list of files with their corresponding Git status.</para>
<para><simplesect kind="return"><para><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref> structure containing the status of all files in the repository. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" line="57" column="13" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" bodystart="65" bodyend="89" declfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" declline="57" declcolumn="13"/>
        <references refid="da/ddb/structGitFileList_1a8a2892f47d399a67ce95ecdf0ab4a79f" compoundref="db/d45/git__utils_8h" startline="36">GitFileList::count</references>
        <references refid="d1/d46/structGitFile_1a822b94e2dcbcc4086c35387aef4f4a57" compoundref="db/d45/git__utils_8h" startline="26">GitFile::filename</references>
        <references refid="da/ddb/structGitFileList_1a66fb028701c6d829b9a0720baa4adb76" compoundref="db/d45/git__utils_8h" startline="35">GitFileList::files</references>
        <references refid="db/d45/git__utils_8h_1abe0ec333b60117063f9b9fd9f849cb08" compoundref="db/d45/git__utils_8h" startline="18">MAX_FILENAME</references>
        <references refid="d8/d55/dir__analytics_8c_1a2c5eecb22513a88c24ae5831a3265e54" compoundref="d8/d55/dir__analytics_8c" startline="29">MAX_FILES</references>
        <references refid="d1/db9/git__utils_8c_1aa639b9b3bbea0da0a09fbad3ca69aa5d" compoundref="d1/db9/git__utils_8c" startline="51" endline="55">parse_status</references>
        <references refid="d1/d46/structGitFile_1ac3e25bcf3aad47f8c13f3a98f250b874" compoundref="db/d45/git__utils_8h" startline="27">GitFile::status</references>
        <referencedby refid="df/d77/git__integration_8c_1ac8420e6fdcd1a0373f840ecbe95a220a" compoundref="df/d77/git__integration_8c" startline="30" endline="68">integrate_git_status</referencedby>
        <referencedby refid="d0/d29/main_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d0/d29/main_8c" startline="275" endline="423">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="db/d45/git__utils_8h_1ad929b0cd0d22aee7938780406e8e584b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * get_current_branch</definition>
        <argsstring>(void)</argsstring>
        <name>get_current_branch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Retrieves the name of the current Git branch. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the name of the current Git branch in the repository.</para>
<para><simplesect kind="return"><para>Dynamically allocated string containing the branch name, or NULL if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The caller is responsible for freeing the returned string.</para>
</simplesect>
This function executes &apos;git rev-parse&apos; command to get the name of the current Git branch.</para>
<para><simplesect kind="return"><para>Dynamically allocated string containing the branch name, or NULL if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The caller is responsible for freeing the returned string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" line="67" column="6" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" bodystart="100" bodyend="117" declfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h" declline="67" declcolumn="6"/>
        <referencedby refid="d2/dda/display__utils_8c_1a8b38e99d9128bf4a4badc21df13d442b" compoundref="d2/dda/display__utils_8c" startline="108" endline="199">display_entries</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Header file for Git utility functions used in facad. </para>
    </briefdescription>
    <detaileddescription>
<para>This file declares structures and functions for interacting with Git repositories. It provides functionality to check if a directory is a Git repository, retrieve Git status information, and get the current branch name.</para>
<para><simplesect kind="author"><para>Sergey Veneckiy </para>
</simplesect>
<simplesect kind="date"><para>2024 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@file<sp/>git_utils.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Header<sp/>file<sp/>for<sp/>Git<sp/>utility<sp/>functions<sp/>used<sp/>in<sp/>facad.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>declares<sp/>structures<sp/>and<sp/>functions<sp/>for<sp/>interacting<sp/>with<sp/>Git<sp/>repositories.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>It<sp/>provides<sp/>functionality<sp/>to<sp/>check<sp/>if<sp/>a<sp/>directory<sp/>is<sp/>a<sp/>Git<sp/>repository,</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>retrieve<sp/>Git<sp/>status<sp/>information,<sp/>and<sp/>get<sp/>the<sp/>current<sp/>branch<sp/>name.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>@author<sp/>Sergey<sp/>Veneckiy</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>@date<sp/>2024</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GIT_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GIT_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Include<sp/>for<sp/>boolean<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="db/d45/git__utils_8h_1abe0ec333b60117063f9b9fd9f849cb08" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_FILENAME<sp/>1024<sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>length<sp/>for<sp/>filenames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="db/d45/git__utils_8h_1a2c5eecb22513a88c24ae5831a3265e54" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_FILES<sp/>1000<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>files<sp/>to<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>@struct<sp/>GitFile</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Structure<sp/>to<sp/>hold<sp/>information<sp/>about<sp/>a<sp/>single<sp/>file&apos;s<sp/>Git<sp/>status.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="d1/d46/structGitFile" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="26" refid="d1/d46/structGitFile_1a822b94e2dcbcc4086c35387aef4f4a57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filename[<ref refid="db/d45/git__utils_8h_1abe0ec333b60117063f9b9fd9f849cb08" kindref="member">MAX_FILENAME</ref>];<sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="d1/d46/structGitFile_1ac3e25bcf3aad47f8c13f3a98f250b874" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d1/d46/structGitFile_1ac3e25bcf3aad47f8c13f3a98f250b874" kindref="member">status</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Single<sp/>character<sp/>representing<sp/>Git<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}<sp/><ref refid="d1/d46/structGitFile" kindref="compound">GitFile</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>@struct<sp/>GitFileList</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Structure<sp/>to<sp/>hold<sp/>Git<sp/>status<sp/>information<sp/>for<sp/>multiple<sp/>files.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="da/ddb/structGitFileList" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35" refid="da/ddb/structGitFileList_1a66fb028701c6d829b9a0720baa4adb76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d46/structGitFile" kindref="compound">GitFile</ref><sp/>files[<ref refid="db/d45/git__utils_8h_1a2c5eecb22513a88c24ae5831a3265e54" kindref="member">MAX_FILES</ref>];<sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>of<sp/>GitFile<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="da/ddb/structGitFileList_1a8a2892f47d399a67ce95ecdf0ab4a79f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/ddb/structGitFileList_1a8a2892f47d399a67ce95ecdf0ab4a79f" kindref="member">count</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>files<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>the<sp/>current<sp/>directory<sp/>is<sp/>part<sp/>of<sp/>a<sp/>Git<sp/>repository.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>determines<sp/>whether<sp/>the<sp/>current<sp/>working<sp/>directory</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>is<sp/>within<sp/>a<sp/>Git<sp/>repository.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>current<sp/>directory<sp/>is<sp/>in<sp/>a<sp/>Git<sp/>repository,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d45/git__utils_8h_1ab59b5067f41c72180a081769679d524d" kindref="member">is_git_repository</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>Git<sp/>status<sp/>for<sp/>all<sp/>files<sp/>in<sp/>the<sp/>current<sp/>repository.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>gets<sp/>the<sp/>status<sp/>of<sp/>all<sp/>files<sp/>in<sp/>the<sp/>current<sp/>Git<sp/>repository,</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>including<sp/>untracked,<sp/>modified,<sp/>and<sp/>staged<sp/>files.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@return<sp/>GitFileList<sp/>structure<sp/>containing<sp/>the<sp/>status<sp/>of<sp/>all<sp/>files<sp/>in<sp/>the<sp/>repository.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref><sp/><ref refid="db/d45/git__utils_8h_1a3d9263e3ac5e7c5af45a994cc1d7d559" kindref="member">get_git_status</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>name<sp/>of<sp/>the<sp/>current<sp/>Git<sp/>branch.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>gets<sp/>the<sp/>name<sp/>of<sp/>the<sp/>current<sp/>Git<sp/>branch<sp/>in<sp/>the<sp/>repository.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@return<sp/>Dynamically<sp/>allocated<sp/>string<sp/>containing<sp/>the<sp/>branch<sp/>name,<sp/>or<sp/>NULL<sp/>if<sp/>an<sp/>error<sp/>occurred.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>freeing<sp/>the<sp/>returned<sp/>string.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="db/d45/git__utils_8h_1ad929b0cd0d22aee7938780406e8e584b" kindref="member">get_current_branch</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>GIT_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.h"/>
  </compounddef>
</doxygen>
