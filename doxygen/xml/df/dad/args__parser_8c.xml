<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="df/dad/args__parser_8c" kind="file" language="C++">
    <compoundname>args_parser.c</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="yes">config.h</includes>
    <includes refid="da/d7e/args__parser_8h" local="yes">args_parser.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c</label>
        <link refid="df/dad/args__parser_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>args_parser.h</label>
        <link refid="da/d7e/args__parser_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>config.h</label>
      </node>
      <node id="7">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="df/dad/args__parser_8c_1ac7b851d3c3ad6d7a78c3e0aabb176d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_glob_pattern</definition>
        <argsstring>(const char *str)</argsstring>
        <name>is_glob_pattern</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Checks if a string is a glob pattern. </para>
        </briefdescription>
        <detaileddescription>
<para>This function determines whether a given string contains wildcard characters used in glob patterns.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to check for glob pattern characters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the string contains glob pattern characters, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" line="28" column="6" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" bodystart="28" bodyend="31"/>
        <referencedby refid="d0/d29/main_8c_1a116587b452eeb0a0e9f7d9602ba67ae0" compoundref="d0/d29/main_8c" startline="255" endline="262">is_glob_or_specific_files</referencedby>
        <referencedby refid="d0/d29/main_8c_1ae7d3bb334fabeeccc7dfb05e7f968d47" compoundref="d0/d29/main_8c" startline="204" endline="243">process_target</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dad/args__parser_8c_1ae69db95445b885f269cab7f4dc062307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref></type>
        <definition>CommandLineArgs parse_args</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>parse_args</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Parses command-line arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes the command-line arguments, setting appropriate flags in the <ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref> structure and collecting non-option arguments as targets.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of command-line arguments. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of strings containing the command-line arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref> structure containing the parsed arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" line="43" column="17" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" bodystart="43" bodyend="67"/>
        <references refid="de/d26/structCommandLineArgs_1a279e4f9d5bd585e348c74ab980bc6ad0" compoundref="da/d7e/args__parser_8h" startline="31">CommandLineArgs::invalid_opt</references>
        <references refid="de/d26/structCommandLineArgs_1ab399696f534705c62ec3d5ba045eed09" compoundref="da/d7e/args__parser_8h" startline="30">CommandLineArgs::show_dir_analytics</references>
        <references refid="de/d26/structCommandLineArgs_1a210deb76b4bf3d30f0bb09e16ba7fbe4" compoundref="da/d7e/args__parser_8h" startline="28">CommandLineArgs::show_help</references>
        <references refid="de/d26/structCommandLineArgs_1ab86308b944cadea1ed5fb0b48661a355" compoundref="da/d7e/args__parser_8h" startline="29">CommandLineArgs::show_longlisting</references>
        <references refid="de/d26/structCommandLineArgs_1a518fe65eec71814dec37b3fb872fa8a0" compoundref="da/d7e/args__parser_8h" startline="27">CommandLineArgs::show_version</references>
        <references refid="de/d26/structCommandLineArgs_1a5185c801bf6373761724b96d20f05aeb" compoundref="da/d7e/args__parser_8h" startline="33">CommandLineArgs::target_count</references>
        <references refid="de/d26/structCommandLineArgs_1a24eadec0753883664957eb8322579c25" compoundref="da/d7e/args__parser_8h" startline="32">CommandLineArgs::targets</references>
        <referencedby refid="d0/d29/main_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d0/d29/main_8c" startline="275" endline="423">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dad/args__parser_8c_1a1e124c87a6ba6ffa680d9297fbc17d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_args</definition>
        <argsstring>(CommandLineArgs *args)</argsstring>
        <name>free_args</name>
        <param>
          <type><ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref> *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Frees memory allocated for command-line arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>This function releases the memory allocated for the targets array in the <ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref> structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref> structure to be freed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" line="77" column="6" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" bodystart="77" bodyend="82"/>
        <references refid="de/d26/structCommandLineArgs_1a24eadec0753883664957eb8322579c25" compoundref="da/d7e/args__parser_8h" startline="32">CommandLineArgs::targets</references>
        <referencedby refid="d0/d29/main_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d0/d29/main_8c" startline="275" endline="423">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dad/args__parser_8c_1ac6230d495fc909bb61195c45f703d492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_version</definition>
        <argsstring>(void)</argsstring>
        <name>print_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Prints the version information of facad. </para>
        </briefdescription>
        <detaileddescription>
<para>This function displays the version number of the facad program, which is defined in the config.h file. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" line="90" column="6" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" bodystart="90" bodyend="92"/>
        <referencedby refid="d0/d29/main_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d0/d29/main_8c" startline="275" endline="423">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="df/dad/args__parser_8c_1ae5d62d86e562ee295d1566f9ad74b73c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_help</definition>
        <argsstring>(const char *program_name)</argsstring>
        <name>print_help</name>
        <param>
          <type>const char *</type>
          <declname>program_name</declname>
        </param>
        <briefdescription>
<para>Prints the help information for facad. </para>
        </briefdescription>
        <detaileddescription>
<para>This function displays usage information and available options for the facad program.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>program_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the program executable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" line="102" column="6" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c" bodystart="102" bodyend="111"/>
        <referencedby refid="d0/d29/main_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d0/d29/main_8c" startline="275" endline="423">main</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Implementation of command-line argument parsing for facad. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains functions for parsing command-line arguments, identifying options, and handling version and help requests. It also includes utility functions for working with file patterns.</para>
<para><simplesect kind="author"><para>Sergey Veneckiy </para>
</simplesect>
<simplesect kind="date"><para>2024 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@file<sp/>args_parser.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Implementation<sp/>of<sp/>command-line<sp/>argument<sp/>parsing<sp/>for<sp/>facad.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>functions<sp/>for<sp/>parsing<sp/>command-line<sp/>arguments,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>identifying<sp/>options,<sp/>and<sp/>handling<sp/>version<sp/>and<sp/>help<sp/>requests.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>It<sp/>also<sp/>includes<sp/>utility<sp/>functions<sp/>for<sp/>working<sp/>with<sp/>file<sp/>patterns.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>@author<sp/>Sergey<sp/>Veneckiy</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>@date<sp/>2024</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="da/d7e/args__parser_8h" kindref="compound">args_parser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>a<sp/>string<sp/>is<sp/>a<sp/>glob<sp/>pattern.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>determines<sp/>whether<sp/>a<sp/>given<sp/>string<sp/>contains</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>wildcard<sp/>characters<sp/>used<sp/>in<sp/>glob<sp/>patterns.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>@param<sp/>str<sp/>The<sp/>string<sp/>to<sp/>check<sp/>for<sp/>glob<sp/>pattern<sp/>characters.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>string<sp/>contains<sp/>glob<sp/>pattern<sp/>characters,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="df/dad/args__parser_8c_1ac7b851d3c3ad6d7a78c3e0aabb176d15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/dad/args__parser_8c_1ac7b851d3c3ad6d7a78c3e0aabb176d15" kindref="member">is_glob_pattern</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>the<sp/>presence<sp/>of<sp/>wildcard<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(strchr(str,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>NULL<sp/>||<sp/>strchr(str,<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>NULL<sp/>||<sp/>strchr(str,<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Parses<sp/>command-line<sp/>arguments.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>processes<sp/>the<sp/>command-line<sp/>arguments,<sp/>setting<sp/>appropriate<sp/>flags</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>CommandLineArgs<sp/>structure<sp/>and<sp/>collecting<sp/>non-option<sp/>arguments<sp/>as<sp/>targets.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>@param<sp/>argc<sp/>The<sp/>number<sp/>of<sp/>command-line<sp/>arguments.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>@param<sp/>argv<sp/>An<sp/>array<sp/>of<sp/>strings<sp/>containing<sp/>the<sp/>command-line<sp/>arguments.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>@return<sp/>A<sp/>CommandLineArgs<sp/>structure<sp/>containing<sp/>the<sp/>parsed<sp/>arguments.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="df/dad/args__parser_8c_1ae69db95445b885f269cab7f4dc062307" refkind="member"><highlight class="normal"><ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref><sp/><ref refid="df/dad/args__parser_8c_1ae69db95445b885f269cab7f4dc062307" kindref="member">parse_args</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref><sp/>args<sp/>=<sp/>{0};<sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>args<sp/>structure<sp/>with<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="de/d26/structCommandLineArgs_1a24eadec0753883664957eb8322579c25" kindref="member">targets</ref><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>*<sp/>(argc<sp/>-<sp/>1));<sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>targets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>args.<ref refid="de/d26/structCommandLineArgs_1a5185c801bf6373761724b96d20f05aeb" kindref="member">target_count</ref><sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>target<sp/>count<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>all<sp/>arguments<sp/>starting<sp/>from<sp/>index<sp/>1<sp/>(skip<sp/>program<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-v&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--version&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d26/structCommandLineArgs_1a518fe65eec71814dec37b3fb872fa8a0" kindref="member">show_version</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>flag<sp/>to<sp/>show<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-h&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--help&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d26/structCommandLineArgs_1a210deb76b4bf3d30f0bb09e16ba7fbe4" kindref="member">show_help</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>flag<sp/>to<sp/>show<sp/>help</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-l&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--long&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d26/structCommandLineArgs_1ab86308b944cadea1ed5fb0b48661a355" kindref="member">show_longlisting</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>flag<sp/>for<sp/>long<sp/>listing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;-a&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--analytics&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d26/structCommandLineArgs_1ab399696f534705c62ec3d5ba045eed09" kindref="member">show_dir_analytics</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>flag<sp/>for<sp/>directory<sp/>analytics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[i][0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d26/structCommandLineArgs_1a279e4f9d5bd585e348c74ab980bc6ad0" kindref="member">invalid_opt</ref><sp/>=<sp/>argv[i];<sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>invalid<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>immediately<sp/>on<sp/>invalid<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.<ref refid="de/d26/structCommandLineArgs_1a24eadec0753883664957eb8322579c25" kindref="member">targets</ref>[args.<ref refid="de/d26/structCommandLineArgs_1a5185c801bf6373761724b96d20f05aeb" kindref="member">target_count</ref>++]<sp/>=<sp/>argv[i];<sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>non-option<sp/>argument<sp/>as<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>populated<sp/>CommandLineArgs<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Frees<sp/>memory<sp/>allocated<sp/>for<sp/>command-line<sp/>arguments.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>releases<sp/>the<sp/>memory<sp/>allocated<sp/>for<sp/>the<sp/>targets<sp/>array</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>CommandLineArgs<sp/>structure.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>@param<sp/>args<sp/>Pointer<sp/>to<sp/>the<sp/>CommandLineArgs<sp/>structure<sp/>to<sp/>be<sp/>freed.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="df/dad/args__parser_8c_1a1e124c87a6ba6ffa680d9297fbc17d43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/dad/args__parser_8c_1a1e124c87a6ba6ffa680d9297fbc17d43" kindref="member">free_args</ref>(<ref refid="de/d26/structCommandLineArgs" kindref="compound">CommandLineArgs</ref><sp/>*args)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args-&gt;<ref refid="de/d26/structCommandLineArgs_1a24eadec0753883664957eb8322579c25" kindref="member">targets</ref>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(args-&gt;<ref refid="de/d26/structCommandLineArgs_1a24eadec0753883664957eb8322579c25" kindref="member">targets</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>targets<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="de/d26/structCommandLineArgs_1a24eadec0753883664957eb8322579c25" kindref="member">targets</ref><sp/>=<sp/>NULL;<sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>pointer<sp/>to<sp/>NULL<sp/>to<sp/>prevent<sp/>double-free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Prints<sp/>the<sp/>version<sp/>information<sp/>of<sp/>facad.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>displays<sp/>the<sp/>version<sp/>number<sp/>of<sp/>the<sp/>facad<sp/>program,</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>which<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>config.h<sp/>file.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="df/dad/args__parser_8c_1ac6230d495fc909bb61195c45f703d492" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/dad/args__parser_8c_1ac6230d495fc909bb61195c45f703d492" kindref="member">print_version</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;facad<sp/>version<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>VERSION);<sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>version<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Prints<sp/>the<sp/>help<sp/>information<sp/>for<sp/>facad.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>displays<sp/>usage<sp/>information<sp/>and<sp/>available<sp/>options</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>for<sp/>the<sp/>facad<sp/>program.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>@param<sp/>program_name<sp/>The<sp/>name<sp/>of<sp/>the<sp/>program<sp/>executable.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="df/dad/args__parser_8c_1ae5d62d86e562ee295d1566f9ad74b73c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/dad/args__parser_8c_1ae5d62d86e562ee295d1566f9ad74b73c" kindref="member">print_help</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*program_name)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Usage:<sp/>%s<sp/>[OPTION]<sp/>[DIRECTORY]\n&quot;</highlight><highlight class="normal">,<sp/>program_name);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;List<sp/>directory<sp/>contents<sp/>with<sp/>colorful<sp/>emojis.\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Options:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-h,<sp/>--help<sp/><sp/><sp/><sp/><sp/><sp/>display<sp/>this<sp/>help<sp/>and<sp/>exit\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-v,<sp/>--version<sp/><sp/><sp/>output<sp/>version<sp/>information<sp/>and<sp/>exit\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-l,<sp/>--long<sp/><sp/><sp/><sp/><sp/><sp/>display<sp/>detailed<sp/>directory<sp/>listing\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>-a,<sp/>--analytics<sp/>display<sp/>directory<sp/>analytics\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nIf<sp/>DIRECTORY<sp/>is<sp/>not<sp/>specified,<sp/>the<sp/>current<sp/>directory<sp/>is<sp/>used.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/args_parser.c"/>
  </compounddef>
</doxygen>
