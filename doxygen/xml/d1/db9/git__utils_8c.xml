<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="d1/db9/git__utils_8c" kind="file" language="C++">
    <compoundname>git_utils.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">unistd.h</includes>
    <includes refid="db/d45/git__utils_8h" local="yes">git_utils.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c</label>
        <link refid="d1/db9/git__utils_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>git_utils.h</label>
        <link refid="db/d45/git__utils_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="d1/db9/git__utils_8c_1a51ae0134feff92edfd5cf268cd0b1acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_git_repository</definition>
        <argsstring>()</argsstring>
        <name>is_git_repository</name>
        <briefdescription>
<para>Checks if the current directory is part of a Git repository. </para>
        </briefdescription>
        <detaileddescription>
<para>This function executes the &apos;git rev-parse&apos; command to determine if the current working directory is within a Git repository.</para>
<para><simplesect kind="return"><para>true if the current directory is in a Git repository, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" line="28" column="6" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" bodystart="28" bodyend="40"/>
        <referencedby refid="df/d77/git__integration_8c_1ac8420e6fdcd1a0373f840ecbe95a220a" compoundref="df/d77/git__integration_8c" startline="30" endline="68">integrate_git_status</referencedby>
        <referencedby refid="d0/d29/main_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d0/d29/main_8c" startline="275" endline="423">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d1/db9/git__utils_8c_1aa639b9b3bbea0da0a09fbad3ca69aa5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>static char parse_status</definition>
        <argsstring>(const char *status_str)</argsstring>
        <name>parse_status</name>
        <param>
          <type>const char *</type>
          <declname>status_str</declname>
        </param>
        <briefdescription>
<para>Parses a Git status string and returns a single character status code. </para>
        </briefdescription>
        <detaileddescription>
<para>This function interprets the two-character Git status string and returns a single character representing the file&apos;s status.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Two-character Git status string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Single character representing the file&apos;s Git status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" line="51" column="13" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" bodystart="51" bodyend="55"/>
        <referencedby refid="d1/db9/git__utils_8c_1a1af8df0b83d4e26524cdb4371b7bd7a6" compoundref="d1/db9/git__utils_8c" startline="65" endline="89">get_git_status</referencedby>
      </memberdef>
      <memberdef kind="function" id="d1/db9/git__utils_8c_1a1af8df0b83d4e26524cdb4371b7bd7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref></type>
        <definition>GitFileList get_git_status</definition>
        <argsstring>()</argsstring>
        <name>get_git_status</name>
        <briefdescription>
<para>Retrieves the Git status for all files in the current repository. </para>
        </briefdescription>
        <detaileddescription>
<para>This function executes &apos;git status&apos; command and parses its output to create a list of files with their corresponding Git status.</para>
<para><simplesect kind="return"><para><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref> structure containing the status of all files in the repository. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" line="65" column="13" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" bodystart="65" bodyend="89"/>
        <references refid="da/ddb/structGitFileList_1a8a2892f47d399a67ce95ecdf0ab4a79f" compoundref="db/d45/git__utils_8h" startline="36">GitFileList::count</references>
        <references refid="d1/d46/structGitFile_1a822b94e2dcbcc4086c35387aef4f4a57" compoundref="db/d45/git__utils_8h" startline="26">GitFile::filename</references>
        <references refid="da/ddb/structGitFileList_1a66fb028701c6d829b9a0720baa4adb76" compoundref="db/d45/git__utils_8h" startline="35">GitFileList::files</references>
        <references refid="db/d45/git__utils_8h_1abe0ec333b60117063f9b9fd9f849cb08" compoundref="db/d45/git__utils_8h" startline="18">MAX_FILENAME</references>
        <references refid="d8/d55/dir__analytics_8c_1a2c5eecb22513a88c24ae5831a3265e54" compoundref="d8/d55/dir__analytics_8c" startline="29">MAX_FILES</references>
        <references refid="d1/db9/git__utils_8c_1aa639b9b3bbea0da0a09fbad3ca69aa5d" compoundref="d1/db9/git__utils_8c" startline="51" endline="55">parse_status</references>
        <references refid="d1/d46/structGitFile_1ac3e25bcf3aad47f8c13f3a98f250b874" compoundref="db/d45/git__utils_8h" startline="27">GitFile::status</references>
        <referencedby refid="df/d77/git__integration_8c_1ac8420e6fdcd1a0373f840ecbe95a220a" compoundref="df/d77/git__integration_8c" startline="30" endline="68">integrate_git_status</referencedby>
        <referencedby refid="d0/d29/main_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="d0/d29/main_8c" startline="275" endline="423">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d1/db9/git__utils_8c_1a2ef1d42e63a1b1ab2270c1d82157a384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * get_current_branch</definition>
        <argsstring>()</argsstring>
        <name>get_current_branch</name>
        <briefdescription>
<para>Retrieves the name of the current Git branch. </para>
        </briefdescription>
        <detaileddescription>
<para>This function executes &apos;git rev-parse&apos; command to get the name of the current Git branch.</para>
<para><simplesect kind="return"><para>Dynamically allocated string containing the branch name, or NULL if an error occurred. </para>
</simplesect>
<simplesect kind="note"><para>The caller is responsible for freeing the returned string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" line="100" column="6" bodyfile="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c" bodystart="100" bodyend="117"/>
        <referencedby refid="d2/dda/display__utils_8c_1a8b38e99d9128bf4a4badc21df13d442b" compoundref="d2/dda/display__utils_8c" startline="108" endline="199">display_entries</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Implementation of Git utility functions for facad. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains utility functions for interacting with Git repositories. It provides functionality to check if the current directory is a Git repository, retrieve Git status information, and get the current branch name.</para>
<para><simplesect kind="author"><para>Sergey Veneckiy </para>
</simplesect>
<simplesect kind="date"><para>2024 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@file<sp/>git_utils.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Implementation<sp/>of<sp/>Git<sp/>utility<sp/>functions<sp/>for<sp/>facad.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>utility<sp/>functions<sp/>for<sp/>interacting<sp/>with<sp/>Git<sp/>repositories.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>It<sp/>provides<sp/>functionality<sp/>to<sp/>check<sp/>if<sp/>the<sp/>current<sp/>directory<sp/>is<sp/>a<sp/>Git<sp/>repository,</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>retrieve<sp/>Git<sp/>status<sp/>information,<sp/>and<sp/>get<sp/>the<sp/>current<sp/>branch<sp/>name.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>@author<sp/>Sergey<sp/>Veneckiy</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>@date<sp/>2024</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d45/git__utils_8h" kindref="compound">git_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Checks<sp/>if<sp/>the<sp/>current<sp/>directory<sp/>is<sp/>part<sp/>of<sp/>a<sp/>Git<sp/>repository.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>executes<sp/>the<sp/>&apos;git<sp/>rev-parse&apos;<sp/>command<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>if<sp/>the<sp/>current<sp/>working<sp/>directory<sp/>is<sp/>within<sp/>a<sp/>Git<sp/>repository.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>the<sp/>current<sp/>directory<sp/>is<sp/>in<sp/>a<sp/>Git<sp/>repository,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="d1/db9/git__utils_8c_1a51ae0134feff92edfd5cf268cd0b1acf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/db9/git__utils_8c_1a51ae0134feff92edfd5cf268cd0b1acf" kindref="member">is_git_repository</ref>()<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>&apos;git<sp/>rev-parse&apos;<sp/>command<sp/>and<sp/>redirect<sp/>output<sp/>to<sp/>/dev/null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>fp<sp/>=<sp/>popen(</highlight><highlight class="stringliteral">&quot;git<sp/>rev-parse<sp/>--is-inside-work-tree<sp/>2&gt;/dev/null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>false<sp/>if<sp/>command<sp/>execution<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[128];<sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>to<sp/>store<sp/>command<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>command<sp/>output<sp/>and<sp/>check<sp/>if<sp/>it&apos;s<sp/>&quot;true&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>fgets(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>fp)<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(buffer,<sp/></highlight><highlight class="stringliteral">&quot;true\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>pclose(fp);<sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>command<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Parses<sp/>a<sp/>Git<sp/>status<sp/>string<sp/>and<sp/>returns<sp/>a<sp/>single<sp/>character<sp/>status<sp/>code.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>interprets<sp/>the<sp/>two-character<sp/>Git<sp/>status<sp/>string<sp/>and</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>returns<sp/>a<sp/>single<sp/>character<sp/>representing<sp/>the<sp/>file&apos;s<sp/>status.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@param<sp/>status_str<sp/>Two-character<sp/>Git<sp/>status<sp/>string.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@return<sp/>Single<sp/>character<sp/>representing<sp/>the<sp/>file&apos;s<sp/>Git<sp/>status.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="d1/db9/git__utils_8c_1aa639b9b3bbea0da0a09fbad3ca69aa5d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="d1/db9/git__utils_8c_1aa639b9b3bbea0da0a09fbad3ca69aa5d" kindref="member">parse_status</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>status_str)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_str[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>status_str[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Untracked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status_str[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>status_str[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_str[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>?<sp/>status_str[0]<sp/>:<sp/>status_str[1];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Modified,<sp/>Staged,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>Git<sp/>status<sp/>for<sp/>all<sp/>files<sp/>in<sp/>the<sp/>current<sp/>repository.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>executes<sp/>&apos;git<sp/>status&apos;<sp/>command<sp/>and<sp/>parses<sp/>its<sp/>output<sp/>to<sp/>create</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>a<sp/>list<sp/>of<sp/>files<sp/>with<sp/>their<sp/>corresponding<sp/>Git<sp/>status.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@return<sp/>GitFileList<sp/>structure<sp/>containing<sp/>the<sp/>status<sp/>of<sp/>all<sp/>files<sp/>in<sp/>the<sp/>repository.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="d1/db9/git__utils_8c_1a1af8df0b83d4e26524cdb4371b7bd7a6" refkind="member"><highlight class="normal"><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref><sp/><ref refid="d1/db9/git__utils_8c_1a1af8df0b83d4e26524cdb4371b7bd7a6" kindref="member">get_git_status</ref>()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/ddb/structGitFileList" kindref="compound">GitFileList</ref><sp/>list<sp/>=<sp/>{0};<sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>an<sp/>empty<sp/>GitFileList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>&apos;git<sp/>status&apos;<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>fp<sp/>=<sp/>popen(</highlight><highlight class="stringliteral">&quot;git<sp/>status<sp/>-s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>empty<sp/>list<sp/>if<sp/>command<sp/>execution<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[<ref refid="db/d45/git__utils_8h_1abe0ec333b60117063f9b9fd9f849cb08" kindref="member">MAX_FILENAME</ref><sp/>+<sp/>3];<sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>to<sp/>store<sp/>each<sp/>line<sp/>of<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>each<sp/>line<sp/>of<sp/>the<sp/>command<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(line,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(line),<sp/>fp)<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>list.<ref refid="da/ddb/structGitFileList_1a8a2892f47d399a67ce95ecdf0ab4a79f" kindref="member">count</ref><sp/>&lt;<sp/><ref refid="d8/d55/dir__analytics_8c_1a2c5eecb22513a88c24ae5831a3265e54" kindref="member">MAX_FILES</ref>)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(line)<sp/>&gt;<sp/>3)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>line<sp/>has<sp/>enough<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d46/structGitFile" kindref="compound">GitFile</ref><sp/>file;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.<ref refid="d1/d46/structGitFile_1ac3e25bcf3aad47f8c13f3a98f250b874" kindref="member">status</ref><sp/>=<sp/><ref refid="d1/db9/git__utils_8c_1aa639b9b3bbea0da0a09fbad3ca69aa5d" kindref="member">parse_status</ref>(line);<sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>filename,<sp/>skipping<sp/>the<sp/>first<sp/>3<sp/>characters<sp/>(status<sp/>and<sp/>space)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(file.<ref refid="d1/d46/structGitFile_1a822b94e2dcbcc4086c35387aef4f4a57" kindref="member">filename</ref>,<sp/>line<sp/>+<sp/>3,<sp/><ref refid="db/d45/git__utils_8h_1abe0ec333b60117063f9b9fd9f849cb08" kindref="member">MAX_FILENAME</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.<ref refid="d1/d46/structGitFile_1a822b94e2dcbcc4086c35387aef4f4a57" kindref="member">filename</ref>[strcspn(file.<ref refid="d1/d46/structGitFile_1a822b94e2dcbcc4086c35387aef4f4a57" kindref="member">filename</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)]<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>newline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="da/ddb/structGitFileList_1a66fb028701c6d829b9a0720baa4adb76" kindref="member">files</ref>[list.<ref refid="da/ddb/structGitFileList_1a8a2892f47d399a67ce95ecdf0ab4a79f" kindref="member">count</ref>++]<sp/>=<sp/>file;<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>file<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>pclose(fp);<sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>command<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>populated<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Retrieves<sp/>the<sp/>name<sp/>of<sp/>the<sp/>current<sp/>Git<sp/>branch.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>executes<sp/>&apos;git<sp/>rev-parse&apos;<sp/>command<sp/>to<sp/>get<sp/>the<sp/>name<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>current<sp/>Git<sp/>branch.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@return<sp/>Dynamically<sp/>allocated<sp/>string<sp/>containing<sp/>the<sp/>branch<sp/>name,<sp/>or<sp/>NULL<sp/>if<sp/>an<sp/>error<sp/>occurred.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>freeing<sp/>the<sp/>returned<sp/>string.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="d1/db9/git__utils_8c_1a2ef1d42e63a1b1ab2270c1d82157a384" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="d1/db9/git__utils_8c_1a2ef1d42e63a1b1ab2270c1d82157a384" kindref="member">get_current_branch</ref>()<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>&apos;git<sp/>rev-parse&apos;<sp/>command<sp/>to<sp/>get<sp/>the<sp/>branch<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>fp<sp/>=<sp/>popen(</highlight><highlight class="stringliteral">&quot;git<sp/>rev-parse<sp/>--abbrev-ref<sp/>HEAD<sp/>2&gt;/dev/null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>NULL<sp/>if<sp/>command<sp/>execution<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>branch<sp/>=<sp/>malloc(256);<sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>branch<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fgets(branch,<sp/>256,<sp/>fp)<sp/>==<sp/>NULL)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>branch<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(branch);<sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>allocated<sp/>memory<sp/>if<sp/>read<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pclose(fp);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>command<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>NULL<sp/>to<sp/>indicate<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>pclose(fp);<sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>command<sp/>pipe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>branch[strcspn(branch,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)]<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>newline<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>branch;<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>branch<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/honeyguide/Desktop/MyOpenSource/facad/src/git_utils.c"/>
  </compounddef>
</doxygen>
